#!/bin/bash

# SPDX-License-Identifier: GPL-2.0-only

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name[:<host|target|init|bootstrap>]"
  exit 1
fi

check_package $1
scripts/unpack $PACKAGE_NAME

mkdir -p $STAMPS/$PACKAGE_NAME
STAMP=$STAMPS/$PACKAGE_NAME/build_$TARGET

if [ -f $STAMP ] ; then
  . $STAMP
  check_deepmd5 || rm -f $STAMP
fi

if [ -f $STAMP ] ; then
  exit 0
fi

setup_toolchain $TARGET

unset -f pre_configure_$TARGET
unset -f configure_$TARGET
unset -f make_$TARGET
unset -f pre_makeinstall_$TARGET
unset -f makeinstall_$TARGET
unset -f post_makeinstall_$TARGET

CONFIGURE_OPTS_HOST="
  --host=$HOST_NAME
  --build=$HOST_NAME
  --prefix=$TOOLCHAIN
  --sysconfdir=$TOOLCHAIN/etc
  --enable-silent-rules
  --disable-dependency-tracking
  --disable-shared --enable-static
"
CONFIGURE_OPTS_BOOTSTRAP="$CONFIGURE_OPTS_HOST"

CONFIGURE_OPTS_TARGET="
  --host=$TARGET_NAME
  --build=$HOST_NAME
  --prefix=/usr
  --sysconfdir=/etc
  --enable-silent-rules
  --disable-dependency-tracking
  --disable-shared --enable-static
"
CONFIGURE_OPTS_INIT="$CONFIGURE_OPTS_TARGET"

CMAKE_OPTS_HOST="
  -DCMAKE_TOOLCHAIN_FILE=$CMAKE_CONF
  -DCMAKE_INSTALL_PREFIX=$TOOLCHAIN
"

CMAKE_OPTS_TARGET="
  -DCMAKE_TOOLCHAIN_FILE=$CMAKE_CONF
  -DCMAKE_INSTALL_PREFIX=/usr
"
if [ "$DEBUG" = yes ]; then
  CMAKE_OPTS_TARGET="$CMAKE_OPTS_TARGET -DCMAKE_BUILD_TYPE=Debug"
fi
CMAKE_OPTS_INIT="$CMAKE_OPTS_TARGET"

. $PKG_DIR/package.mk
for p in $(eval echo "\$PKG_DEPENDS_$UPTARGET"); do
  scripts/build $p
done

printf "%${BUILD_INDENT}c ${boldyellow}BUILD${endcolor}    $PACKAGE_NAME ${boldwhite}($TARGET)${endcolor}\n" ' '
export BUILD_INDENT=$((${BUILD_INDENT:-1}+4))

is_virtual=$(echo $PKG_DIR | awk -F "/" '{print $(NF-1)}')
if [ ! "$is_virtual" = "virtual" ]; then
  mkdir -p $PKG_BUILD
  cd $PKG_BUILD
  rm -rf $INSTALL

  if [ "$PKG_AUTORECONF" = yes ]; then
    do_autoreconf
  fi

  if [ -f "$CONFIGURE_SCRIPT" -o -f "$CMAKE_SCRIPT" ]; then
    mkdir -p $PKG_BUILD_SUBDIR
  fi
  if [ "$(type -t pre_configure_$TARGET)" = "function" ]; then
    pre_configure_$TARGET
  fi
  if [ -n "$PKG_BUILD_SUBDIR" -a -d "$PKG_BUILD_SUBDIR" ] ; then
    cd $PKG_BUILD_SUBDIR
  fi

  if [ "$(type -t configure_$TARGET)" = "function" ]; then
    configure_$TARGET
  elif [ -f "$CMAKE_SCRIPT" ]; then
    eval cmake $CMAKE_SCRIPT \$CMAKE_OPTS_$UPTARGET \$PKG_CMAKE_OPTS_$UPTARGET \\$(dirname $CMAKE_SCRIPT) -B . $(dirname $CMAKE_SCRIPT)
  elif [ -f "$CONFIGURE_SCRIPT" ]; then
    eval $CONFIGURE_SCRIPT \$CONFIGURE_OPTS_$UPTARGET \$PKG_CONFIGURE_OPTS_$UPTARGET
  fi

  if [ "$(type -t make_$TARGET)" = "function" ]; then
    make_$TARGET
  else
    eval make \$PKG_MAKE_OPTS_$UPTARGET
  fi

  if [ "$(type -t pre_makeinstall_$TARGET)" = "function" ]; then
    pre_makeinstall_$TARGET
  fi

  if [ "$(type -t makeinstall_$TARGET)" = "function" ]; then
    makeinstall_$TARGET
  else
    case "$TARGET" in
      target|bootstrap)
        make install DESTDIR=$SYSROOT_PREFIX
        ;;&
      target|init)
        make install DESTDIR=$INSTALL
        ;;
      host)
        make install
        ;;
    esac
  fi
fi # ! virtual

if [ -d $PKG_DIR/fs-$TARGET ]; then
  mkdir -p $INSTALL
  cp -PR $PKG_DIR/fs-$TARGET/* $INSTALL
fi

if [ "$(type -t post_makeinstall_$TARGET)" = "function" ]; then
  post_makeinstall_$TARGET
fi

if [ "$TARGET" = "target" -o "$TARGET" = "init" ]; then
  if [ -d "$INSTALL" ] ; then
    rm -rf $INSTALL/{usr/,}include
    rm -rf $INSTALL/{usr/,}lib/cmake
    rm -rf $INSTALL/{usr/,}lib/pkgconfig
    rm -rf $INSTALL/{usr/,}man
    rm -rf $INSTALL/{usr/,}share/aclocal
    rm -rf $INSTALL/{usr/,}share/bash-completion
    rm -rf $INSTALL/{usr/,}share/doc
    rm -rf $INSTALL/{usr/,}share/gtk-doc
    rm -rf $INSTALL/{usr/,}share/info
    rm -rf $INSTALL/{usr/,}share/locale
    rm -rf $INSTALL/{usr/,}share/man
    rm -rf $INSTALL/{usr/,}share/pkgconfig
    rm -rf $INSTALL/{usr/,}share/zsh
    rm -rf $INSTALL/{usr/,}var
    find $INSTALL \( -name "*.orig" \
                  -o -name "*.rej" \
                  -o -name "*.a" \
                  -o -name "*.la" \
                  -o -name "*.o" \
                  -o -name "*.in" \
                  -o -name ".git*" \) \
      -exec rm -f {} \; 2>/dev/null || :
    find $INSTALL -type d -exec rmdir -p {} \; 2>/dev/null || :

    if [ ! "$DEBUG" = yes ]; then
      debug_strip $INSTALL
    fi
    cleanup_rpath $INSTALL
  fi
fi
rm -f $SYSROOT_PREFIX/usr/lib/*.la

save_stamp
