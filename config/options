# SPDX-License-Identifier: GPL-2.0-only

set -e

################################################################################
# functions
################################################################################
setup_toolchain() {
  case "$TARGET" in
    target|init)
      export CC="${TARGET_NAME}-gcc"
      export CXX="${TARGET_NAME}-g++"
      export CPP="${TARGET_NAME}-cpp"
      export LD="${TARGET_NAME}-ld"
      export AS="${TARGET_NAME}-as"
      export AR="${TARGET_NAME}-ar"
      export NM="${TARGET_NAME}-nm"
      export RANLIB="${TARGET_NAME}-ranlib"
      export OBJCOPY="${TARGET_NAME}-objcopy"
      export OBJDUMP="${TARGET_NAME}-objdump"
      export STRIP="${TARGET_NAME}-strip"
      export CPPFLAGS=""
      export CFLAGS="$TARGET_CFLAGS"
      export CXXFLAGS="$TARGET_CXXFLAGS"
      export LDFLAGS="$TARGET_LDFLAGS"
      export PKG_CONFIG_PATH=""
      export PKG_CONFIG_LIBDIR="$SYSROOT_PREFIX/usr/lib/pkgconfig:$SYSROOT_PREFIX/usr/share/pkgconfig"
      export PKG_CONFIG_SYSROOT_DIR="$SYSROOT_PREFIX"
      export CMAKE_CONF=$TOOLCHAIN/etc/cmake-$TARGET_NAME.conf
      if [ ! -f $CMAKE_CONF ] ; then
        mkdir -p $TOOLCHAIN/etc
        echo "SET(CMAKE_SYSTEM_NAME Linux)" >> $CMAKE_CONF
        echo "SET(CMAKE_SYSTEM_VERSION 1)"  >> $CMAKE_CONF
        echo "SET(CMAKE_SYSTEM_PROCESSOR  $TARGET_ARCH)" >> $CMAKE_CONF
        echo "SET(CMAKE_C_COMPILER   $CC)"  >> $CMAKE_CONF
        echo "SET(CMAKE_ASM_COMPILER $CC)"  >> $CMAKE_CONF
        echo "SET(CMAKE_CXX_COMPILER $CXX)" >> $CMAKE_CONF
        echo "SET(CMAKE_CPP_COMPILER $CPP)" >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH  $SYSROOT_PREFIX)"   >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)"  >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)"  >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)"  >> $CMAKE_CONF
        echo "SET(CMAKE_C_FLAGS_RELEASE \"\" CACHE STRING \"\")"     >> $CMAKE_CONF
        echo "SET(CMAKE_CXX_FLAGS_RELEASE \"\" CACHE STRING \"\")"   >> $CMAKE_CONF
      fi
      ;;
    host|bootstrap)
      export CC="$HOST_CC"
      export CXX="$HOST_CXX"
      export CPP="cpp"
      export LD="ld"
      export AS="as"
      export AR="ar"
      export NM="nm"
      export RANLIB="ranlib"
      export OBJCOPY="objcopy"
      export STRIP="strip"
      export CPPFLAGS="-I$TOOLCHAIN/include"
      export CFLAGS="$HOST_CFLAGS"
      export CXXFLAGS="$HOST_CXXFLAGS"
      export LDFLAGS="$HOST_LDFLAGS"
      export PKG_CONFIG_PATH=""
      export PKG_CONFIG_LIBDIR="$TOOLCHAIN/lib/pkgconfig:$TOOLCHAIN/share/pkgconfig"
      export PKG_CONFIG_SYSROOT_DIR=""
      export CMAKE_CONF=$TOOLCHAIN/etc/cmake-$HOST_NAME.conf
      if [ ! -f $CMAKE_CONF ] ; then
        mkdir -p $TOOLCHAIN/etc
        echo "SET(CMAKE_SYSTEM_NAME Linux)" >> $CMAKE_CONF
        echo "SET(CMAKE_SYSTEM_VERSION 1)"  >> $CMAKE_CONF
        echo "SET(CMAKE_C_COMPILER   $CC)"  >> $CMAKE_CONF
        echo "SET(CMAKE_ASM_COMPILER $CC)"  >> $CMAKE_CONF
        echo "SET(CMAKE_CXX_COMPILER $CXX)" >> $CMAKE_CONF
        echo "SET(CMAKE_CPP_COMPILER $CXX)" >> $CMAKE_CONF
        echo "SET(CMAKE_AR $AR)"            >> $CMAKE_CONF # hum?
        echo "SET(CMAKE_FIND_ROOT_PATH  $TOOLCHAIN)" >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)" >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)" >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)" >> $CMAKE_CONF
        echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)" >> $CMAKE_CONF
      fi
      ;;
  esac
}

show_config() {
  echo " ======================================================"
  echo " - CPU (ARCH):             $TARGET_CPU ($TARGET_ARCH)"
  echo " ======================================================"
}

check_root() {
  if [ ! "$(id -u)" = "0" ] ; then
    return
  fi

  cat << "EOF"

  DANGER ! DANGER ! DANGER !                     /===-_---~~~~~~~~~------____
                                                |===-~___                _,-'
                 -==\\                         `//~\\   ~~~~`---.___.-~~
             ______-==|                         | |  \\           _-~`
       __--~~~  ,-/-==\\                        | |   `\        ,'
    _-~       /'    |  \\                      / /      \      /
  .'        /       |   \\                   /' /        \   /'
 /  ____  /         |    \`\.__/-~~ ~ \ _ _/'  /          \/'
/-'~    ~~~~~---__  |     ~-/~         ( )   /'        _--~`
                  \_|      /        _)   ;  ),   __--~~ 
                    '~~--_/      _-~/-  / \   '-~ \          BUILDING AS ROOT
                   {\__--_/}    / \\_>- )<__\      \             IS DANGEROUS
                   /'   (_/  _-~  | |__>--<__|      |
                  |0  0 _/) )-~     | |__>--<__|     |  THERE WILL BE DRAGONS
                  / /~ ,_/       / /__>---<__/      | AND YOU'LL BE ALL ALONE
                 o o _//        /-~_>---<__-~      /
                 (^(~          /~_>---<__-      _-~               THINK TWICE
                ,/|           /__>--<__/     _-~
             ,//('(          |__>--<__|     /                  .----_
            ( ( '))          |__>--<__|    |                 /' _---_~\
         `-)) )) (           |__>--<__|    |               /'  /     ~\`\
        ,/,'//( (             \__>--<__\    \            /'  //        ||
      ,( ( ((, ))              ~-__>--<_~-_  ~--____---~' _/'/        /'
    `~/  )` ) ,/|                 ~-_~>--<_/-__       __-~ _/
  ._-~//( )/ )) `                    ~~-'_/_/ /~~~~~~~__--~
   ;'( ')/ ,)(                              ~~~~~~~~~~
  ' ') '( (/
    '   '  `
  o-<-<     <--- THIS IS YOU IF YOU CONTINUE FURTHER

EOF
  read -p "continue (y/n) ? " ans
  [ "$ans" = "y" ] && : || exit 1
}

check_deepmd5() {
  PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
  if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
    return 1
  fi
  return 0
}

save_stamp() {
  PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
  for i in PKG_NAME PKG_DEEPMD5; do
    eval val=\$$i
    echo "STAMP_$i=\"$val\"" >> $STAMP
  done
}

debug_strip() {
  if [ ! "$DEBUG" = yes ]; then
    $STRIP $(find $* -type f ! -name "*.ko" 2>/dev/null) 2>/dev/null || :
  fi
}

cleanup_rpath() {
  for bin in $(find $1 -type f -executable 2>/dev/null) ; do
    if [ $(chrpath -l $bin 2>/dev/null | grep -c $(echo "PATH=$SYSROOT_PREFIX")) -gt 0 ] ; then
      chrpath -d $bin
    fi
  done
}

check_package() {
  if [ -z "$PKG_DIR" ] ; then
    printf "${boldred}$1: package not found${endcolor}\n"
    exit 1
  fi
  if [ ! -f "$PKG_DIR/package.mk" ]; then
    printf "${boldred}$1: no package.mk file found${endcolor}\n"
    exit 1
  fi
}

do_autoreconf() {
  if [ -f "$CONFIGURE_SCRIPT.ac" ] ; then
    if [ ! -f $PKG_BUILD/.autoreconf ] ; then
      printf "%${BUILD_INDENT}c ${boldmagenta}AUTORECONF${endcolor}   $PKG_NAME\n" ' '
      export BUILD_INDENT=$((${BUILD_INDENT:-1}+4))

      mkdir -p $PKG_BUILD/m4
      touch $PKG_BUILD/NEWS $PKG_BUILD/AUTHORS $PKG_BUILD/ChangeLog
      autoreconf --verbose --force --install -I $SYSROOT_PREFIX/usr/share/aclocal $(dirname $CONFIGURE_SCRIPT)
      touch $PKG_BUILD/.autoreconf
    fi
  fi
}

get_pkg_target() {
  PACKAGE_NAME=$(echo $1 | awk -F : '{print $1}')
  TARGET=$(echo $1 | awk -F : '{print $2}')
  if [ -z "$TARGET" ]; then
    TARGET="target"
  fi
  UPTARGET=$(echo $TARGET | tr a-z A-Z)
}

get_pkg_dir() {
  if [ ! -z $1 ] ; then
    local _DIRS=$(find $ROOT/packages -name $1 2>/dev/null)
    for _PKG_DIR in $_DIRS ; do
      if [ -d "$_PKG_DIR" -a -f $_PKG_DIR/package.mk ] ; then
        echo $_PKG_DIR
        break
      fi
    done
  fi
}

get_pkg_build() {
  if [ ! -z $1 ] ; then
    local _PKG_DIR=$(get_pkg_dir $1)
    if [ -d "$_PKG_DIR" -a -f $_PKG_DIR/package.mk ] ; then
      . $_PKG_DIR/package.mk
    fi
    echo $BUILD/${PKG_NAME}-${PKG_VERSION}
  fi
}

################################################################################
# buildsystem basics
################################################################################
export LC_ALL=C
ROOT=$(pwd)

boldred="\e[1;31m"
boldgreen="\e[1;32m"
boldyellow="\e[1;33m"
boldmagenta="\e[1;35m"
boldcyan="\e[1;36m"
boldwhite="\e[1;37m"
endcolor="\e[0m"

################################################################################
# config
################################################################################
. config/arch 2>/dev/null || :

################################################################################
# more buildsystem stuff
################################################################################
PROJECT="RPi"
BUILD=$ROOT/build.$PROJECT
TOOLCHAIN=$BUILD/toolchain

HOST_NAME=$(gcc -dumpmachine)
TARGET_NAME=$TARGET_GCC_ARCH-linux-musl${TARGET_ABI}
SYSROOT_PREFIX=$TOOLCHAIN/$TARGET_NAME/sysroot

TARGET_IMG=$ROOT/target
STAMPS=$BUILD/.stamps
STAMPS_INSTALL=$BUILD/image/.stamps

export MAKEFLAGS="-j$(nproc) V=0"

################################################################################
# target environment
################################################################################
[ "$DEBUG" = yes ] && DEBUG_FLAGS="-ggdb" || DEBUG_FLAGS="-DNDEBUG"

TARGET_CFLAGS="$TARGET_CFLAGS -w -pipe -Os $DEBUG_FLAGS -ffunction-sections -fdata-sections"
TARGET_CXXFLAGS="$TARGET_CFLAGS -D_GLIBCXX_USE_C99_STDIO=1 -D_GLIBCXX_USE_C99_STDLIB=1"
TARGET_LDFLAGS="$TARGET_LDFLAGS -Wl,--as-needed -Wl,--gc-sections"

################################################################################
# host environment
################################################################################
HOST_CC="gcc"
HOST_CXX="g++"

HOST_CFLAGS="-O2 -w -pipe -I$TOOLCHAIN/include -Wno-format-security"
HOST_CXXFLAGS="$HOST_CFLAGS"
HOST_LDFLAGS="-Wl,-rpath,$TOOLCHAIN/lib -L$TOOLCHAIN/lib"

################################################################################
# export path / ld lib path & clean distro specific env
################################################################################
if [ -z "$__PATH_SET" ]; then
  export PATH="$TOOLCHAIN/bin:/sbin:$PATH" __PATH_SET=1
fi
unset LD_LIBRARY_PATH

################################################################################
# set package metadata
################################################################################
PKG_NAME="$1"
PKG_VERSION="none"
PKG_URL=""
PKG_DEPENDS_TARGET=""
PKG_DEPENDS_HOST=""
PKG_DEPENDS_INIT=""
PKG_DEPENDS_BOOTSTRAP=""
PKG_NEED_REBUILD=""

PKG_CMAKE_SCRIPT="CMakeLists.txt"
PKG_CONFIGURE_SCRIPT="configure"
PKG_CONFIGURE_OPTS_HOST=""
PKG_CONFIGURE_OPTS_TARGET=""
PKG_CONFIGURE_OPTS_INIT=""
PKG_CONFIGURE_OPTS_BOOTSTRAP=""
PKG_MAKE_OPTS_HOST=""
PKG_MAKE_OPTS_TARGET=""
PKG_MAKE_OPTS_INIT=""
PKG_MAKE_OPTS_BOOTSTRAP=""

PKG_ADDON_REV="0"
PKG_ADDON_DESC=""

if [ -n "$1" ]; then
  _PKG_ROOT_NAME=$(echo $1 | cut -d: -f1)
  PKG_DIR=$(get_pkg_dir $_PKG_ROOT_NAME)
fi

if [ -e $PKG_DIR/package.mk ]; then
  . $PKG_DIR/package.mk
fi

PKG_BUILD="$BUILD/${PKG_NAME}-${PKG_VERSION}"
CONFIGURE_SCRIPT="$PKG_BUILD/$PKG_CONFIGURE_SCRIPT"
CMAKE_SCRIPT="$PKG_BUILD/$PKG_CMAKE_SCRIPT"

# depends
STAMP_DEPENDS="$PKG_DIR"

for i in $PKG_NEED_REBUILD ; do
  STAMPS_PKG="$(find $ROOT/packages -type d -iname $i 2>/dev/null)"
  for j in $STAMPS_PKG ; do
    if [ -n "$j" ] ; then
      STAMP_DEPENDS="$STAMP_DEPENDS $j"
    fi
  done
done

################################################################################
# setup
################################################################################
get_pkg_target $1

PKG_BUILD_SUBDIR=$PKG_BUILD/.build_$TARGET

# make sure $INSTALL is set
INSTALL=$PKG_BUILD/.install_$TARGET
INSTALL_IMAGE=$BUILD/image/$TARGET

